    class Solution {
        public int findKthLargest(int[] nums, int k) {
            return findKthLargest(nums, 0, nums.length - 1, nums.length - k + 1);
        }

        private int findKthLargest(int[] nums, int begin, int end, int k) {
            int partition = partition(nums, begin, end);
            if (k < partition - begin + 1) {
                return findKthLargest(nums, begin, partition - 1, k);
            } else if (k > partition - begin + 1) {
                return findKthLargest(nums, partition + 1, end, k - (partition - begin + 1));
            } else {
                return nums[partition];
            }
        }

        private int partition(int[] nums, int begin, int end) {
            int pv = nums[begin];
            int left = begin, right = end;
            while (left < right) {
                while (left < right && nums[right] > pv) right--;
                while (left < right && nums[left] <= pv) left++;
                swap(nums, left, right);
            }
            swap(nums, left, begin);
            return left;
        }

        private void swap(int[] nums, int i, int j) {
            int t = nums[i];
            nums[i] = nums[j];
            nums[j] = t;
        }

    }

//runtime:2551 ms
//memory:60.6 MB
