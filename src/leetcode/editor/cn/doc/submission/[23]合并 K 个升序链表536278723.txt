
    /**
     * Definition for singly-linked list.
     * public class ListNode {
     * int val;
     * ListNode next;
     * ListNode() {}
     * ListNode(int val) { this.val = val; }
     * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
     * }
     */
    class Solution {
        public ListNode mergeKLists(ListNode[] lists) {
            return merge(lists, 0, lists.length - 1);
        }

        public ListNode merge(ListNode[] lists, int l, int r) {
            if (l == r) return lists[l];
            if (l > r) return null;
            int mid = (l + r) >>> 1;
            return mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r));
        }


        public ListNode mergeKLists1(ListNode[] lists) {
            ListNode cur = null;
            for (ListNode list : lists) {
                cur = mergeTwoLists(cur, list);
            }
            return cur;
        }

        public ListNode mergeTwoLists(ListNode p1, ListNode p2) {
            ListNode s = new ListNode(-1, null);
            ListNode p3 = s;
            while (p1 != null && p2 != null) {
                if (p1.val >= p2.val) {
                    p3.next = p2;
                    p2 = p2.next;
                } else {
                    p3.next = p1;
                    p1 = p1.next;
                }
                p3 = p3.next;
            }
            if (p1 != null) p3.next = p1;
            if (p2 != null) p3.next = p2;
            return s.next;
        }
    }

//runtime:1 ms
//memory:43.3 MB
