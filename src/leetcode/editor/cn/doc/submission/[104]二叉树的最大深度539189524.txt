
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        public int maxDepth(TreeNode root) {
            Deque<TreeNode> stack = new LinkedList<>();
            TreeNode cur = root;
            TreeNode pop = null;
            int depth = 0;
            while (!stack.isEmpty() || cur != null) {
                if (cur != null) {
                    stack.push(cur);
                    cur = cur.left;
                    depth = Math.max(depth, stack.size());
                } else {
                    TreeNode peek = stack.peek();
                    if (peek.right == null || peek.right == pop) {
                        pop = stack.pop();
                    } else {
                        cur = peek.right;
                    }
                }
            }
            return depth;
        }
    }

//runtime:3 ms
//memory:41.6 MB
