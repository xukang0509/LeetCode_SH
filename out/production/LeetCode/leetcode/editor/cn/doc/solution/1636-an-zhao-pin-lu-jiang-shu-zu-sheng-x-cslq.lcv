### 方法，模拟

**解题思路**

按着题目的要求，先算出数组 $\textit{nums}$ 中各元素的频率，然后按照元素频率和数值对数组进行排序。

[参考](https://leetcode.cn/problems/sort-array-by-increasing-frequency/solutions/1831531/an-zhao-pin-lu-jiang-shu-zu-sheng-xu-pai-z2db/)

### 代码

* []

```Java
class Solution {
    public int[] frequencySort(int[] nums) {
        List<Integer> list = new ArrayList<>();
        Map<Integer, Integer> freqs = new HashMap<>();
        for (int x : nums) {
            list.add(x);
            freqs.put(x, freqs.getOrDefault(x, 0) + 1);
        }
        Collections.sort(list, (a, b) -> {
            int freq1 = freqs.get(a), freq2 = freqs.get(b);
            return freq1 == freq2 ? b - a : freq1 - freq2;
        });
        for (int i = 0; i < nums.length; ++i) {
            nums[i] = list.get(i);
        }
        return nums;
    }
}
```

**复杂度分析**

- 时间复杂度：$O(n \log n)$，其中 $n$ 是数组 $\textit{nums}$ 的长度。排序消耗 $O(n \log n)$ 时间。

- 空间复杂度：$O(n)$，存储数组元素频率的哈希表消耗 $O(n)$ 空间。

