
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        public TreeNode buildTree(int[] inorder, int[] postorder) {
            if (postorder.length == 0) return null;
            // 创建根节点
            int rootValue = postorder[postorder.length - 1]; // 3
            TreeNode root = new TreeNode(rootValue);
            for (int i = 0; i < inorder.length; i++) {
                if (rootValue == inorder[i]) { // 1
                    int[] inLeft = Arrays.copyOfRange(inorder, 0, i);
                    int[] inRight = Arrays.copyOfRange(inorder, i + 1, inorder.length);

                    int rightSize = inorder.length - i - 1;
                    int[] postRight = Arrays.copyOfRange(postorder, postorder.length - 1 - rightSize, postorder.length - 1);
                    int[] postLeft = Arrays.copyOfRange(postorder, 0, postorder.length - 1 - rightSize);

                    root.left = buildTree(inLeft, postLeft);
                    root.right = buildTree(inRight, postRight);
                    break;
                }
            }
            return root;
        }
    }

//runtime:6 ms
//memory:44.6 MB
