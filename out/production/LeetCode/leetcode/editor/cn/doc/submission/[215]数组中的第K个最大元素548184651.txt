    class Solution {
        public int findKthLargest(int[] nums, int k) {
            return findKthLargest(nums, 0, nums.length - 1, nums.length - k + 1);
        }

        private int findKthLargest(int[] nums, int begin, int end, int k) {
            int partition = partition(nums, begin, end);
            if (k < partition - begin + 1) {
                return findKthLargest(nums, begin, partition - 1, k);
            } else if (k > partition - begin + 1) {
                return findKthLargest(nums, partition + 1, end, k - (partition - begin + 1));
            } else {
                return nums[partition];
            }
        }

        private int partition(int[] nums, int left, int right) {
            int idx = ThreadLocalRandom.current().nextInt(right - left + 1) + left;
            swap(nums, idx, left);
            int pv = nums[left]; // 基准元素值
            int i = left + 1, j = right;
            while (i <= j) {
                // i 从左向右找大的或者相等的
                while (i <= j && nums[i] < pv) i++;
                // j 从右向左找小的或者相等的
                while (i <= j && nums[j] > pv) j--;
                if (i <= j) swap(nums, i++, j--);
            }
            swap(nums, left, j);
            return j;
        }

        private void swap(int[] nums, int i, int j) {
            int t = nums[i];
            nums[i] = nums[j];
            nums[j] = t;
        }

    }

//runtime:5 ms
//memory:55.9 MB
